"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .codesamplesjobstatus import CodeSamplesJobStatus
import httpx
import pydantic
from test_sdk_name_test_package.types import BaseModel
from test_sdk_name_test_package.utils import FieldMetadata, PathParamMetadata
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class GetCodeSamplePreviewAsyncRequestTypedDict(TypedDict):
    job_id: str
    r"""The ID of the job to check the status and retrieve results"""


class GetCodeSamplePreviewAsyncRequest(BaseModel):
    job_id: Annotated[
        str,
        pydantic.Field(alias="jobID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The ID of the job to check the status and retrieve results"""


class GetCodeSamplePreviewAsyncResponseBodyTypedDict(TypedDict):
    r"""Job is still in progress"""

    status: CodeSamplesJobStatus
    r"""The current status of the job. Possible values are `pending` or `running`."""


class GetCodeSamplePreviewAsyncResponseBody(BaseModel):
    r"""Job is still in progress"""

    status: CodeSamplesJobStatus
    r"""The current status of the job. Possible values are `pending` or `running`."""


GetCodeSamplePreviewAsyncResponseTypedDict = TypeAliasType(
    "GetCodeSamplePreviewAsyncResponseTypedDict",
    Union[
        GetCodeSamplePreviewAsyncResponseBodyTypedDict, httpx.Response, httpx.Response
    ],
)


GetCodeSamplePreviewAsyncResponse = TypeAliasType(
    "GetCodeSamplePreviewAsyncResponse",
    Union[GetCodeSamplePreviewAsyncResponseBody, httpx.Response, httpx.Response],
)
