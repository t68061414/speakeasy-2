"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from test_sdk_name_test_package.types import BaseModel
from test_sdk_name_test_package.utils import FieldMetadata, QueryParamMetadata
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetWorkspaceAccessRequestTypedDict(TypedDict):
    gen_lock_id: NotRequired[str]
    r"""Unique identifier of the generation target."""
    target_type: NotRequired[str]
    r"""The type of the generated target."""
    passive: NotRequired[bool]
    r"""Skip side-effects like incrementing metrics."""


class GetWorkspaceAccessRequest(BaseModel):
    gen_lock_id: Annotated[
        Optional[str],
        pydantic.Field(alias="genLockId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Unique identifier of the generation target."""

    target_type: Annotated[
        Optional[str],
        pydantic.Field(alias="targetType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The type of the generated target."""

    passive: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Skip side-effects like incrementing metrics."""
